{
  inputs = {
    nixpkgs.url = "flake:nixpkgs";
    flake-parts.url = "github:hercules-ci/flake-parts";
    pre-commit-hooks-nix = {
      url = "github:cachix/pre-commit-hooks.nix";
      inputs.nixpkgs.follows = "nixpkgs";
      inputs.nixpkgs-stable.follows = "nixpkgs";
    };
    treefmt-nix = {
      url = "github:numtide/treefmt-nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };
  outputs = inputs@{ flake-parts, ... }:
    flake-parts.lib.mkFlake { inherit inputs; } {
      imports = [
        # To import a flake module
        # 1. Add foo to inputs
        # 2. Add foo as a parameter to the outputs function
        # 3. Add here: foo.flakeModule
        inputs.pre-commit-hooks-nix.flakeModule
        # inputs.devenv.flakeModule
        inputs.treefmt-nix.flakeModule

      ];
      flake = {
        # Put your original flake attributes here.
      };
      #systems = [ "x86_64-linux" "aarch64-linux" "aarch64-darwin" "x86_64-darwin" ];
      systems = [
        # systems for which you want to build the `perSystem` attributes
        "x86_64-linux"
        "aarch64-linux"
        "x86_64-darwin"
      ];
      # perSystem = { config, self', inputs', pkgs, system, ... }: {
      perSystem = { config, self', pkgs, ... }:
        let
          davidMatosUrl = "https://web.tecnico.ulisboa.pt/~david.matos/w/pt/images";
          #hack
          inherit (self'.packages) rts;
          inherit (self'.packages) cdk;
          inherit (self'.packages) c_cpp_properties;
        in
        {
          # Per-system attributes can be defined here. The self' and inputs'
          # module parameters provide easy access to attributes of the same
          # system.

          packages = {

            cdk = pkgs.stdenv.mkDerivation {
              name = "cdk";
              src = pkgs.fetchzip {
                url = "${davidMatosUrl}/c/c3/Libcdk19-202403010000.tar.bz2";
                hash = "sha256-zOXEqUshLycReSEmnVH0RGMR0iJmUEt+JktLUdTIDUc=";
              };
              buildInputs = with pkgs; [ python3 doxygen graphviz ];
              configurePhase = ''
                mkdir -p $out
                sed -i 's|^ROOT = .*|ROOT = $\{out}|' Makefile
                sed -i 's|#DOC ||' Makefile
              '';
              preBuild = ''
                patchShebangs bin/cdk
                export HOME=$PWD
              '';
              FONTCONFIG_FILE = "${pkgs.fontconfig.out}/etc/fonts/fonts.conf";
              FONTCONFIG_PATH = "${pkgs.fontconfig.out}/etc/fonts/";
            };

            rts = pkgs.stdenv.mkDerivation {
              name = "rts";
              src = pkgs.fetchzip {
                url = "${davidMatosUrl}/b/be/Librts5-202103031636.tar.bz2";
                sha256 = "sha256-lc4+X9A0BkxmAlUv+Z915F2rKMojXMA14EhQFKpqJlc=";
              };
              buildInputs = with pkgs; [ yasm ];
              configurePhase = ''
                mkdir -p $out
                sed -i 's|^ROOT = .*|ROOT = $\{out}|' Makefile
                sed -i '/^COMMON_FLAGS =/ s|$| -fno-stack-protector|' Makefile
                ln -s $out/usr/lib $out/lib
              '';
            };

            c_cpp_properties = pkgs.writeText "c_cpp_properties.json" (builtins.toJSON {
              configurations = [{
                name = "Linux";
                includePath = [ "$\{workspaceFolder}/**" "$\{ROOT}/usr/include/" ];
              }];
            });
          };
          # https://tecnico-distsys.github.io/software/index.html
          devShells.default =
            pkgs.mkShell rec {
              #Add executable packages to the nix-shell environment.
              packages = with pkgs; [
                git
                cmake
                gcc13
                yasm
                flex
                bison
                zsh
                # View GraphViz files generated by bison when invoked with --graph:
                graphviz
                ROOT
                valgrind
                ccache
              ];
              ROOT = pkgs.symlinkJoin {
                name = "root";
                paths = [ rts cdk ];
              };
              CXX = "ccache g++";

              shellHook = ''
                # export DEBUG=1
                if [ ! -f ".nix-init" ]; then
                sed -i '/^ROOT = /d' Makefile
                git update-index --assume-unchanged Makefile
                mkdir .vscode
                cp --no-preserve=mode ${c_cpp_properties} .vscode/c_cpp_properties.json
                   touch .nix-init
                fi

                if [ ! -d "docs" ]; then
                  #mkdir -p docs
                  #cp --no-preserve=mode -r ${ROOT}/usr/share/doc/packages/cdk/html docs/cdk
                  ln -s ${ROOT}/usr/share/doc/packages/cdk/html docs

                fi
                ${config.pre-commit.installationScript}
              '';
            };
          pre-commit = {
            check.enable = true;
            settings.hooks = {
              actionlint.enable = true;
              treefmt.enable = true;
              commitizen = {
                enable = true;
                description = "Check whether the current commit message follows commiting rules. Allow empty commit messages by default, because they typically indicate to Git that the commit should be aborted.";
                entry = "${pkgs.commitizen}/bin/cz check --allow-abort --commit-msg-file";
                stages = [ "commit-msg" ];

                # pass_filenames = false;
              };
            };
          };
          treefmt.projectRootFile = ./flake.nix;
          treefmt.programs = {
            nixpkgs-fmt.enable = true;
            deadnix.enable = true;
            statix.enable = true;
            clang-format.enable = true;
            clang-format.package = pkgs.clang-tools_17;
          };
        };
    };
}

